#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
//int main()
//{
//	int k1 = 5;
//	int k2 = k1 % 2;
//	printf("%d\n",k2);
//}//除法和取模

//int main()
//{
//	int k3 = 3;//int 4byte=32bit 0000000000000011
//	int k4 = 5;//101
//	int k5 = k3 & k4;//按位与，意思是取交集，所以都是1才是1，001
//	int k6 = k3 | k4;//按位或，意思是取并集，所以有1取1，111
//	int k7 = k3 ^ k4;//按位异或，意思是如果有两个数字相同取0 两个数字相异取1，那更多数字呢？ 110
//	printf("%d\n", k5);
//	printf("%d\n", k6);
//	printf("%d\n", k7)
// return 0;
//}//位操作符

//int main()
//{
	//int g1 = 1;//001
	//g1 = g1 + 10;//10--1010;001+1010=1011--11
	//g1 += 10;//这两种写法等价，同理还有a-=10; a&=2 001 010 000; a|=2 001 010 011; a^=2 001 010 011--3;
	//还有<<=;>>=，这些叫做复合赋值符
	//g1 = 1;
	//g1 |= 2;
	//printf("%d\n",g1);
	
	//单目操作符；双目操作符；三目操作符； 意思是看左右两边有几个操作数，比如 1+2；那么+就是双目操作符
	//int g2 = 0;
	//printf("%d\n",g2);
	//printf("%d\n", !g2);//0是假，而非0就都是真，用!就可以变成反的，比如真变成假，0变成1。
	//所以!是单目操作符
	//int g3 = -6;
	//int h1 = -g3;
	//printf("%d\n", h1);

	//还有之前遇到的表示取地址的&
	//还有之前遇到的sizeof(),如果是一个定义好的变量比如a，那可以sizeof a
//	int array[10] = { 0 };//10个整型元素的数组, 数组的类型是int[6]
//	int geshu = 0;
//	printf("%d\n", sizeof array);//4byte * 10 = 40
//	geshu = sizeof array / sizeof array[0];//[0]里的0指的是数组下标，指的是数组里的第一个元素
//	printf("%d\n", geshu);
//	return 0;
//}

//enum sex
//{
//	male,
//	female,
//	secret
//};
//int main()
//{
//	enum sex s1 = male;
//	printf("%c\n", s1);
//	printf("%d\n", male);
//	printf("%d\n", female);
//	printf("%d\n", secret);
//	}
//枚举变量

//int Max(int x, int y)
//{
//	if (x > y)
//	{
//		return x;
//	}
//	else
//	{
//		return y;
//	}
//}
//int main()
//{
//	int h1 = 10;
//	int h2 = 20;
//	int max = 0;
//	max = Max(h1, h2);
//	printf("%d\n",max);
// return 0;
//}
//int main()
//{
	//int j1 = 0;
	//00000000000000000000000000000000
	//int j2 = ~j1;//j2是有符号的整形，所以二进制第一个数字是符号位，1代表是负数，0代表是正数
	//11111111111111111111111111111111 这个是补码
	//原码，反码，补码，原码除了符号位取反是反码，反码+1是补码
	//补码-1=反码
	//11111111111111111111111111111110
	//反码取反就是原码（除了符号位）
	//10000000000000000000000000000001-->所以是-1
	//负数在内存中存储时存储的是二进制补码
	//printf("%d\n",j2);//打印时是这个数的原码
	//return 0;
//}
//int main()
//{
	//int j3 = 10;
	//int j4 = ++j3;//前置++,先加1，再赋值
	//int j4 = j3++;//后置++，先赋值，再加1
	//int j4 = --j3;//前置--,先减1，再赋值
	//int j4 = j3--;//后置--，先赋值，再减1
	//printf("j3=%d j4=%d\n",j3,j4);
	//return 0;
//}
//int main()
//{
//	int j5 = (int)3.14;//(类型)表示强制转换，这里是double -->int //尽量别用
//	return 0;
//}

//关系操作符 >;<;>=;<=;==;!=

//逻辑操作符 && 逻辑与;|| 逻辑或
//逻辑中 假为0，真为非0
//&& 两个都为真才是真，打印出来是1，否则就是0
//|| 两个都为假才是假，打印出来是0，否则就是1
//int main()
//{
//	int j6 = 0;
//	int j7 = 2;
//	int j8 = j6 || j7;
//	printf("%d\n", j8);
//	return 0;
//}

//三目操作符 条件操作符 (exp1 ? exp2 : exp3); 
//exp是表达式， 表达式1如果为真（成立），那么就赋值表达式2，否则就赋值表达式3
//int main()
//{
//	int j9 = 1;
//	int j10 = 2;
//	int maxx = 0;
//	maxx = (j9 > j10 ? j9 : j10);
//	printf("%d\n", maxx);
//	return 0;
//}

//取地址&;访问*;结构.;结构->

//硬盘 内存 高速缓存 寄存器

